import '@/styles/globals.css'

import { PropsWithChildren } from 'react'

import type { Metadata } from 'next'
import { Toaster } from '@/components/ui/toaster'
import { PageTextHeroBanner } from '@/components/common'

export const metadata: Metadata = {
  title: 'Taiko Meme',
  description: 'Generated by create next app'
}

// https://nextjs.org/docs/app/building-your-application/optimizing/fonts#with-tailwind-css
import { NextFontSources } from '@/components/ui/auto/font'
const { mochiy_pop_one, montserrat, covered_by_your_grace } = NextFontSources

import { Header } from '@/components/page-header/header'
import { RootProvider } from '@/context/RootProvider'
import { Footer } from '@/components/footer'

type WithChildComponent = React.FC<PropsWithChildren>

const bgUrl = '/sources/bg.png'
const bgAtmosUrl = '/sources/atmosphere.png'

export default function RootLayout({
  children
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html
      lang="en"
      className={`${montserrat.variable} ${mochiy_pop_one.variable} ${covered_by_your_grace.variable}`}
    >
      <body>
        <Toaster />
        <RootProvider>
          <Layout>{children}</Layout>
        </RootProvider>
        {/* <TailwindIndicator /> */}
      </body>
    </html>
  )
}

const Layout: WithChildComponent = ({ children }) => {
  return (
    <React.Fragment>
      <Background className="absolute -z-10" />
      <div
        className={cn(
          'select-none',
          'min-h-screen',
          'xs:pb-[3.75rem]',
          'xs:mx-[16px] lg:mx-[calc(120/1440*100vw)]',
          'xs:pt-[16px] lg:pt-[20px]'
        )}
      >
        <Header
          className={cn(
            'xs:h-[60px] lg:h-[74px]',
            'xs:mb-[calc(24/756*100vh)] lg:mb-[calc(80/858*100vh)]'
          )}
        />
        <PageTextHeroBanner
          className={cn(
            'xs:mb-[calc(24/756*100vh)] lg:mb-[calc(80/858*100vh)]',
            'text-white text-center',
            'xs:text-[64px] lg:text-[128px]'
          )}
        />
        <div className={cn('relative')}>
          <Grid
            className={cn('xs:mx-4 lg:mx-[calc(200/1440*100vw)]', 'xs:mb-6')}
          >
            {children}
          </Grid>
          <MediaBar
            className={cn(
              'lg:absolute lg:right-0 lg:top-0',
              'gap-5 text-[24px]',
              'xs:place-content-center',
              'xs:grid-flow-col lg:grid-flow-row'
            )}
          />
        </div>
      </div>
      <Footer
        className={cn(
          'text-white bg-black',
          'xs:rounded-t-[20px] lg:rounded-t-[40px]',
          'lg:flex items-center lg:justify-between',
          'xs:grid gap-3 place-content-center',
          'xs:h-[102px] lg:h-[80px]',
          'py-[24px]',
          'xs:px-[85px] lg:px-[120px]'
        )}
        logoContainerClass="xs:justify-center"
      />
    </React.Fragment>
  )
}

const MediaBar: FC<{ className: string }> = ({ className }) => {
  return (
    <React.Fragment>
      <Grid className={cn(className)}>
        <Grid className="border rounded-full size-[52px] place-content-center text-white text-[24px] hover:bg-[#E71998] hover:border-none hover:cursor-pointer">
          <div className="i-simple-icons-x" />
        </Grid>
        <Grid className="border rounded-full size-[52px] place-content-center text-white text-[24px] hover:bg-[#E71998] hover:border-none hover:cursor-pointer">
          <div className="i-simple-icons-medium" />
        </Grid>
        <Grid className="border rounded-full size-[52px] place-content-center text-white text-[24px] hover:bg-[#E71998] hover:border-none hover:cursor-pointer">
          <div className="i-simple-icons-telegram text-white size-[52px]" />
        </Grid>
        <Grid className="border rounded-full size-[52px] place-content-center text-white text-[24px] hover:bg-[#E71998] hover:border-none hover:cursor-pointer">
          <div className="i-simple-icons-discord" />
        </Grid>
      </Grid>
    </React.Fragment>
  )
}

const Background: FC<{ className?: string }> = ({ className }) => {
  return (
    <React.Fragment>
      <div className={cn('', className)}>
        <div
          style={{ backgroundImage: `url(${bgUrl})` }}
          className={cn(
            'fixed bg-no-repeat',
            'w-full h-[110vh]',
            'bg-cover bg-center'
          )}
        />
        <div
          style={{ backgroundImage: `url(${bgAtmosUrl})` }}
          className={cn(
            'fixed bg-no-repeat',
            'w-[120vw] h-[130vh]',
            'bg-cover xs:bg-center lg:bg-[center_right_150px]'
          )}
        />
      </div>
    </React.Fragment>
  )
}
